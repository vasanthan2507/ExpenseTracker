
# AI EXPENSE TRACKER - COMPREHENSIVE DJANGO PROJECT DOCUMENTATION

## PROJECT OVERVIEW

**Project Name:** AI Expense Tracker
**Version:** 1.0.0
**Framework:** Django 5.x with Python 3.11+
**Frontend:** HTML5, CSS3, Bootstrap 5, JavaScript, Chart.js
**Database:** SQLite (Production: PostgreSQL recommended)
**Authentication:** Custom Aadhar-based authentication system

---

## EXECUTIVE SUMMARY

The AI Expense Tracker is a sophisticated web application designed to help users manage their personal finances 
through intelligent expense tracking and AI-powered predictive analytics. The system leverages machine learning 
concepts to analyze spending patterns and forecast future expenses based on historical data and simulated 
financial news trends.

### Key Innovation: Aadhar-Based Authentication
Unlike traditional expense trackers, this system implements **Aadhar number validation** to ensure unique user 
registration and prevent duplicate accounts - a critical feature for maintaining data integrity in personal 
finance management.

---

## ARCHITECTURE & DESIGN PHILOSOPHY

### 1. Model-View-Template (MVT) Architecture
Django follows the MVT pattern:
- **Models:** Define data structure and business logic
- **Views:** Handle request/response processing
- **Templates:** Manage presentation layer

### 2. Security-First Approach
- Aadhar-based identity verification
- CSRF protection on all forms
- Password hashing with Django's PBKDF2 algorithm
- Session-based authentication
- SQL injection prevention through ORM

### 3. Scalable Design Patterns
- Separation of concerns
- DRY (Don't Repeat Yourself) principle
- Reusable Django apps
- API-ready architecture

---

## DETAILED FEATURE SPECIFICATIONS

### Feature 1: User Authentication System

#### Registration Process
**Aadhar Validation Rules:**
- Format: XXXX XXXX XXXX (12 digits with spaces)
- First digit: 2-9 (cannot start with 0 or 1)
- Regex Pattern: ^[2-9]{1}[0-9]{3}\s[0-9]{4}\s[0-9]{4}$
- Uniqueness check to prevent duplicate registrations

**Form Fields:**
- Username (unique, 3-50 characters)
- Email (unique, valid email format)
- Password (min 8 characters, hashed)
- Confirm Password (must match)
- Aadhar Number (unique, validated)

**Backend Implementation:**
```python
# models.py
from django.contrib.auth.models import AbstractUser
from django.db import models
import re

class CustomUser(AbstractUser):
    aadhar_number = models.CharField(max_length=14, unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def clean(self):
        # Validate Aadhar format
        pattern = r'^[2-9]{1}[0-9]{3}\s[0-9]{4}\s[0-9]{4}$'
        if not re.match(pattern, self.aadhar_number):
            raise ValidationError('Invalid Aadhar number format')
```

#### Login Process
- Username/Email + Password authentication
- Remember me functionality (session persistence)
- Failed login attempt tracking
- Redirect to dashboard on success

---

### Feature 2: Expense Management System

#### Expense Categories
Pre-defined categories with icons and color coding:

| Category       | Icon          | Color Code | Use Case                    |
|---------------|---------------|------------ |------------------------------|
| Food          | üç¥ fa-utensils | #FF6384    | Groceries, restaurants      |
| Transportation| üöó fa-car      | #36A2EB    | Fuel, public transport      |
| Entertainment | üé¨ fa-film     | #FFCE56    | Movies, subscriptions       |
| Healthcare    | ‚ù§Ô∏è fa-heartbeat| #4BC0C0    | Medical, insurance          |
| Utilities     | üí° fa-lightbulb| #9966FF    | Electricity, water, internet|
| Education     | üéì fa-graduation-cap | #FF9F40 | Courses, books           |
| Shopping      | üõí fa-shopping-cart | #FF6384 | Retail purchases          |
| Other         | ‚ãØ fa-ellipsis-h | #C9CBCF   | Miscellaneous               |

#### Database Model
```python
class ExpenseCategory(models.Model):
    name = models.CharField(max_length=50)
    description = models.TextField(blank=True)
    icon = models.CharField(max_length=50)
    color = models.CharField(max_length=7)
    created_at = models.DateTimeField(auto_now_add=True)

class Expense(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    category = models.ForeignKey(ExpenseCategory, on_delete=models.PROTECT)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    date = models.DateField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-date', '-created_at']
        indexes = [
            models.Index(fields=['user', 'date']),
            models.Index(fields=['category']),
        ]
```

---

### Feature 3: Data Visualization with Chart.js

#### Chart Types Implemented

**1. Bar Chart - Category-wise Expenses**
```javascript
// Aggregates expenses by category
{
    type: 'bar',
    data: {
        labels: ['Food', 'Transport', 'Entertainment', ...],
        datasets: [{
            data: [250, 150, 100, ...],
            backgroundColor: ['#FF6384', '#36A2EB', ...]
        }]
    }
}
```

**2. Line Chart - Expense Trends**
```javascript
// Shows daily/weekly/monthly trends
{
    type: 'line',
    data: {
        labels: ['Oct 1', 'Oct 2', 'Oct 3', ...],
        datasets: [{
            data: [50, 75, 60, ...],
            borderColor: '#4A90E2',
            fill: false
        }]
    }
}
```

**3. Pie Chart - Category Distribution**
```javascript
// Percentage breakdown by category
{
    type: 'pie',
    data: {
        labels: ['Food 35%', 'Transport 25%', ...],
        datasets: [{
            data: [35, 25, 15, ...],
            backgroundColor: ['#FF6384', '#36A2EB', ...]
        }]
    }
}
```

---

### Feature 4: AI-Powered Expense Prediction

#### Prediction Algorithm Overview

**Data Processing Pipeline:**
1. **Historical Data Collection**
   - Retrieve user's expense history (last 3-6 months)
   - Aggregate by category and time period

2. **Statistical Analysis**
   - Calculate moving averages
   - Identify spending trends
   - Detect seasonal patterns

3. **Prediction Model (LSTM Simulation)**
   ```python
   def predict_next_month_expenses(user_expenses):
       # Calculate average for each category
       category_averages = user_expenses.values('category').annotate(
           avg_amount=Avg('amount')
       )

       # Apply trend multiplier (based on recent patterns)
       trend_factor = calculate_trend_factor(user_expenses)

       # External factors (news sentiment analysis)
       news_impact = analyze_news_sentiment()

       # Generate predictions
       predictions = {}
       for cat in category_averages:
           base_amount = cat['avg_amount']
           predicted = base_amount * trend_factor * news_impact[cat['category']]
           predictions[cat['category']] = predicted

       return predictions
   ```

4. **News Data Integration**
   - Fetch financial news headlines (API integration)
   - Sentiment analysis on economy-related articles
   - Impact scoring: inflation rates, consumer spending trends

5. **Confidence Scoring**
   ```python
   def calculate_confidence_score(historical_data_points, variance):
       # More data = higher confidence
       data_score = min(historical_data_points / 90, 1.0)  # Max 90 days

       # Lower variance = higher confidence
       variance_score = 1.0 - min(variance / 100, 1.0)

       # Combined confidence
       confidence = (data_score * 0.6) + (variance_score * 0.4)
       return confidence * 100  # Percentage
   ```

#### Sample News Sources for Analysis
- Economic indicators (inflation, GDP growth)
- Consumer spending reports
- Category-specific trends (e.g., fuel prices for transportation)
- Government policy changes affecting personal finance

---

## DATABASE SCHEMA DESIGN

### Complete Schema with Relationships

```sql
-- Users Table (extends Django's AbstractUser)
CREATE TABLE custom_user (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(150) UNIQUE NOT NULL,
    email VARCHAR(254) UNIQUE NOT NULL,
    password VARCHAR(128) NOT NULL,
    aadhar_number VARCHAR(14) UNIQUE NOT NULL,
    first_name VARCHAR(150),
    last_name VARCHAR(150),
    is_active BOOLEAN DEFAULT TRUE,
    is_staff BOOLEAN DEFAULT FALSE,
    date_joined DATETIME NOT NULL,
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL
);

-- Expense Categories Table
CREATE TABLE expense_category (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(50) NOT NULL,
    description TEXT,
    icon VARCHAR(50) NOT NULL,
    color VARCHAR(7) NOT NULL,
    created_at DATETIME NOT NULL
);

-- Expenses Table
CREATE TABLE expense (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    category_id INTEGER NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description TEXT NOT NULL,
    date DATE NOT NULL,
    created_at DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES custom_user(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES expense_category(id) ON DELETE PROTECT
);

-- AI Predictions Table
CREATE TABLE ai_prediction (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    prediction_month VARCHAR(7) NOT NULL,  -- Format: YYYY-MM
    predicted_amount DECIMAL(10, 2) NOT NULL,
    confidence_score FLOAT NOT NULL,
    news_sources TEXT,  -- JSON field
    category_breakdown TEXT,  -- JSON field
    created_at DATETIME NOT NULL,
    FOREIGN KEY (user_id) REFERENCES custom_user(id) ON DELETE CASCADE
);

-- Indexes for Performance
CREATE INDEX idx_expense_user_date ON expense(user_id, date);
CREATE INDEX idx_expense_category ON expense(category_id);
CREATE INDEX idx_prediction_user_month ON ai_prediction(user_id, prediction_month);
```

---

## PROJECT FILE STRUCTURE

```
ai-expense-tracker/
‚îÇ
‚îú‚îÄ‚îÄ manage.py                      # Django management script
‚îú‚îÄ‚îÄ requirements.txt               # Python dependencies
‚îú‚îÄ‚îÄ README.md                      # Project documentation
‚îú‚îÄ‚îÄ .env                          # Environment variables
‚îú‚îÄ‚îÄ .gitignore                    # Git ignore rules
‚îÇ
‚îú‚îÄ‚îÄ config/                       # Project configuration
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ settings.py              # Django settings
‚îÇ   ‚îú‚îÄ‚îÄ urls.py                  # Root URL configuration
‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py                  # WSGI config
‚îÇ   ‚îî‚îÄ‚îÄ asgi.py                  # ASGI config (for async)
‚îÇ
‚îú‚îÄ‚îÄ apps/                         # Django applications
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ users/                   # User management app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin.py            # Admin customization
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ apps.py             # App configuration
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models.py           # User model (CustomUser)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forms.py            # Registration/Login forms
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ views.py            # Authentication views
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ urls.py             # User-related URLs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validators.py       # Aadhar validation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ signals.py          # User creation signals
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ migrations/         # Database migrations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tests/              # Unit tests
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ expenses/                # Expense management app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ apps.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models.py           # Expense, ExpenseCategory models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forms.py            # Expense forms
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ views.py            # Expense CRUD views
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ urls.py             # Expense URLs
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ serializers.py      # For API (optional)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ migrations/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tests/
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ predictions/             # AI prediction app
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îú‚îÄ‚îÄ admin.py
‚îÇ       ‚îú‚îÄ‚îÄ apps.py
‚îÇ       ‚îú‚îÄ‚îÄ models.py           # AIPrediction model
‚îÇ       ‚îú‚îÄ‚îÄ views.py            # Prediction views
‚îÇ       ‚îú‚îÄ‚îÄ urls.py
‚îÇ       ‚îú‚îÄ‚îÄ ml_engine.py        # Prediction algorithms
‚îÇ       ‚îú‚îÄ‚îÄ news_scraper.py     # Financial news scraper
‚îÇ       ‚îú‚îÄ‚îÄ migrations/
‚îÇ       ‚îî‚îÄ‚îÄ tests/
‚îÇ
‚îú‚îÄ‚îÄ templates/                   # HTML templates
‚îÇ   ‚îú‚îÄ‚îÄ base.html               # Base template
‚îÇ   ‚îú‚îÄ‚îÄ home.html               # Landing page
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ users/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.html
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ profile.html
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ expenses/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dashboard.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ add_expense.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ expense_list.html
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ expense_charts.html
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ predictions/
‚îÇ       ‚îî‚îÄ‚îÄ ai_prediction.html
‚îÇ
‚îú‚îÄ‚îÄ static/                      # Static files
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.css            # Custom styles
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dashboard.css
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ main.js             # Main JavaScript
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ charts.js           # Chart.js configurations
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.js       # Form validation
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ aadhar.js           # Aadhar validation
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ img/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ logo.png
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ lib/                    # Third-party libraries
‚îÇ       ‚îú‚îÄ‚îÄ bootstrap/
‚îÇ       ‚îú‚îÄ‚îÄ chart.js/
‚îÇ       ‚îî‚îÄ‚îÄ fontawesome/
‚îÇ
‚îú‚îÄ‚îÄ media/                       # User-uploaded files
‚îÇ   ‚îî‚îÄ‚îÄ receipts/               # Receipt images (future feature)
‚îÇ
‚îî‚îÄ‚îÄ utils/                       # Utility functions
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îú‚îÄ‚îÄ validators.py           # Custom validators
    ‚îú‚îÄ‚îÄ helpers.py              # Helper functions
    ‚îî‚îÄ‚îÄ constants.py            # App constants
```

---

## INSTALLATION & SETUP GUIDE

### Prerequisites
- Python 3.11 or higher
- pip (Python package manager)
- Virtual environment tool (venv or virtualenv)
- Git

### Step-by-Step Installation

**1. Clone the Repository**
```bash
git clone https://github.com/yourusername/ai-expense-tracker.git
cd ai-expense-tracker
```

**2. Create Virtual Environment**
```bash
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On macOS/Linux:
source venv/bin/activate
```

**3. Install Dependencies**
```bash
pip install --upgrade pip
pip install -r requirements.txt
```

**4. Configure Environment Variables**
Create `.env` file in root directory:
```
DEBUG=True
SECRET_KEY=your-secret-key-here
DATABASE_URL=sqlite:///db.sqlite3
ALLOWED_HOSTS=localhost,127.0.0.1
```

**5. Database Setup**
```bash
# Create migrations
python manage.py makemigrations

# Apply migrations
python manage.py migrate

# Create superuser (admin)
python manage.py createsuperuser

# Load initial data (categories)
python manage.py loaddata initial_categories.json
```

**6. Collect Static Files**
```bash
python manage.py collectstatic
```

**7. Run Development Server**
```bash
python manage.py runserver
```

Access the application at: http://127.0.0.1:8000/

---

## REQUIREMENTS.TXT


================================================================================
REQUIREMENTS.TXT:
================================================================================
Django==5.0.0
python-decouple==3.8
Pillow==10.2.0
django-crispy-forms==2.1
crispy-bootstrap5==2.0.0
djangorestframework==3.14.0
django-cors-headers==4.3.1
gunicorn==21.2.0
whitenoise==6.6.0
psycopg2-binary==2.9.9
django-environ==0.11.2
celery==5.3.4
redis==5.0.1
beautifulsoup4==4.12.3
requests==2.31.0
numpy==1.26.3
pandas==2.2.0
scikit-learn==1.4.0
tensorflow==2.15.0
matplotlib==3.8.2
seaborn==0.13.1
plotly==5.18.0
django-extensions==3.2.3
django-debug-toolbar==4.2.0
pytest-django==4.7.0
coverage==7.4.0
black==24.1.1
flake8==7.0.0
